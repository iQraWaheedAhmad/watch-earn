generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  name               String
  email              String             @unique
  password           String
  resetToken         String?            @map("reset_token")
  resetTokenExpiry   DateTime?          @map("reset_token_expiry")
  lastPasswords      String[]           @default([]) @map("last_passwords")
  passwordLastChanged DateTime?         @map("password_last_changed")
  referralCode       String?            @unique @map("referral_code") @default(uuid())
  referredByCode     String?            @map("referred_by_code")
  referredById       Int?               @map("referred_by_id")
  balance            Decimal            @default(0) @db.Decimal(10, 2)
  totalEarned        Decimal            @default(0) @map("total_earned") @db.Decimal(10, 2)
  referralCount      Int                @default(0) @map("referral_count")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  
  // Relations
  userPlanProgresses UserPlanProgress[]
  deposits           Deposit[]
  fileUploads        FileUpload[]
  profile            Profile?
  sessions           Session[]
  stakings           Staking[]
  withdrawals        Withdrawal[]
  
  // Referral relations
  referredBy        User?              @relation("UserReferrals", fields: [referredById], references: [id])
  referredUsers     User[]             @relation("UserReferrals")
  referralRewards   ReferralReward[]   @relation("ReferralRewards")
  referralEarnings  ReferralReward[]   @relation("ReferralEarnings")

  @@map("users")
}

model ReferralReward {
  id              Int       @id @default(autoincrement())
  referrerId      Int       @map("referrer_id")
  referredUserId  Int       @map("referred_user_id")
  amount          Decimal   @db.Decimal(10, 2)
  planAmount      Decimal   @map("plan_amount") @db.Decimal(10, 2)
  planType        String?   @map("plan_type")
  status          String    @default("pending") // pending, paid
  paidAt          DateTime? @map("paid_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  referrer        User      @relation("ReferralRewards", fields: [referrerId], references: [id])
  referredUser    User      @relation("ReferralEarnings", fields: [referredUserId], references: [id])

  @@map("referral_rewards")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  avatar    String?
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model FileUpload {
  id        String   @id @default(uuid())
  fileName  String
  fileType  String
  fileSize  Int
  fileData  String
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("file_uploads")
}

model Deposit {
  id              String    @id @default(uuid())
  userId          Int       @map("user_id")
  amount          Float
  currency        String
  transactionHash String?   @map("transaction_hash")
  paymentProofUrl String?   @map("payment_proof_url")
  status          String    @default("pending")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  confirmedAt     DateTime? @map("confirmed_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposits")
}

model Staking {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  depositId String?  @map("deposit_id")
  amount    Float
  currency  String
  apy       Float    @default(0)
  startDate DateTime @default(now()) @map("start_date")
  endDate   DateTime @map("end_date")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stakings")
}

model Withdrawal {
  id               String    @id @default(uuid())
  userId           Int       @map("user_id")
  amount           Float
  currency         String
  recipientAddress String    @map("recipient_address")
  transactionHash  String?   @map("transaction_hash")
  status           String    @default("pending")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  processedAt      DateTime? @map("processed_at")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

model UserPlanProgress {
  id            Int       @id @default(autoincrement())
  userId        Int
  planAmount    Int
  profit        Int       @default(0)
  roundCount    Int       @default(0)
  lastRoundDate DateTime?
  canWithdraw   Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, planAmount])
}
